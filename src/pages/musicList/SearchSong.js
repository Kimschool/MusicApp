import React, { useState, useEffect } from "react";
import { useLocation } from "react-router-dom";
import Button from "react-bootstrap/Button";
import { useNavigate } from "react-router-dom";
import "./SearchSong.css";
import ConfirmationModal from "../modal/ConfirmationModal";
import AutoModal from "../modal/AutoModal";

// HTML ÏóîÌã∞Ìã∞Î•º ÎîîÏΩîÎî©ÌïòÎäî Ìï®Ïàò
function decodeHTMLEntities(text) {
    var textArea = document.createElement('textarea');
    textArea.innerHTML = text;
    return textArea.value;
}

const SearchSong = () => {
    const location = useLocation();
    const navigate = useNavigate();
    const [searchResults, setSearchResults] = useState([]);
    const [showModal, setShowModal] = useState(false); // showModal ÏÉÅÌÉú Î≥ÄÏàò Ï∂îÍ∞Ä
    const [autoShowModal, setAutoShowModal] = useState(false); // showModal ÏÉÅÌÉú Î≥ÄÏàò Ï∂îÍ∞Ä
    const [selectedSong, setSelectedSong] = useState(null); // selectedSong ÏÉÅÌÉú Î≥ÄÏàò Ï∂îÍ∞Ä
    const [modalMessage, setModalMessage] = useState(""); // Î™®Îã¨Ïóê ÌëúÏãúÌï† Î©îÏãúÏßÄ ÏÉÅÌÉú Î≥ÄÏàò Ï∂îÍ∞Ä
    const [countdown, setCountdown] = useState(3); // Ïπ¥Ïö¥Ìä∏ Îã§Ïö¥ ÏÉÅÌÉú Î≥ÄÏàò Ï∂îÍ∞Ä


    useEffect(() => {
        const fetchData = async () => {
            try {
                const searchQuery = encodeURIComponent(location.state.song);
                const response = await fetch(`https://www.googleapis.com/youtube/v3/search?q=${searchQuery}&key=AIzaSyBGiZzA7476f7x48yp25UYKYn_IoxC6XjU&part=snippet&maxResults=10`, {
                    method: "GET",
                });

                if (response.ok) {
                    const data = await response.json();
                    // ÎîîÏΩîÎî©ÌïòÏó¨ Ï†úÎ™©ÏùÑ Ï†ïÏÉÅÏ†ÅÏúºÎ°ú ÌëúÏãú
                    const decodedResults = data.items.map(item => ({
                        ...item,
                        snippet: {
                            ...item.snippet,
                            title: decodeHTMLEntities(item.snippet.title)
                        }
                    }));
                    setSearchResults(decodedResults);
                } else {
                    throw new Error("Failed to fetch search results");
                }
            } catch (error) {
                console.error("Error fetching search results: ", error);
            }
        };

        fetchData();
    }, [location.state.song]);

    const handleSongClick = (selectedSong) => {
        setSelectedSong(selectedSong);
        setModalMessage("ÈÅ∏Êäû„Åó„ÅüÊõ≤„ÇíÈÄÅ‰ø°„Åó„Åæ„Åô„ÅãÔºü");
        setShowModal(true);
    };

    const handleConfirm = () => {
        // Ïó¨Í∏∞ÏÑú ÏÑ†ÌÉùÎêú ÎÖ∏ÎûòÎ•º ÏÑúÎ≤ÑÎ°ú Î≥¥ÎÉÖÎãàÎã§.
        sendSongToServer(selectedSong);
        setShowModal(false);
    };

    const handleCancel = () => {
        setShowModal(false);
    };

    const sendSongToServer = async (selectedSong) => {
        try {
            const response = await fetch("http://localhost:8080/api/addToPlaylist", {
                method: "POST",
                mode: "cors", // CORS ÏöîÏ≤≠ÏùÑ Î≥¥ÎÉÑ
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ song: selectedSong })
            });

            if(response.ok) {
                setModalMessage("„É™„ÇØ„Ç®„Çπ„ÉàÊâø„Çä„Åæ„Åó„Åüüíñ");
                setAutoShowModal(true); // Ïπ¥Ïö¥Ìä∏ Îã§Ïö¥ ÏãúÏûë
            } else {
                setModalMessage("„ÇÇ„ÅÜ‰∏ÄÂ∫¶„ÇÑ„ÇäÁõ¥„Åó„Å¶„Åè„Å†„Åï„ÅÑüö´");
                setAutoShowModal(true); // Ïπ¥Ïö¥Ìä∏ Îã§Ïö¥ ÏãúÏûë
            }

        } catch(error){
            console.error("Error adding song to playlist: ", error);
            setModalMessage("„ÇÇ„ÅÜ‰∏ÄÂ∫¶„ÇÑ„ÇäÁõ¥„Åó„Å¶„Åè„Å†„Åï„ÅÑüö´");
            setAutoShowModal(true); // Ïπ¥Ïö¥Ìä∏ Îã§Ïö¥ ÏãúÏûë
        } finally {
            setShowModal(true);
            startCountdown(); // Ïπ¥Ïö¥Ìä∏ Îã§Ïö¥ ÏãúÏûë
        }
    }

    const startCountdown = () => {
        let count = 3; // Ï¥àÍ∏∞ Ïπ¥Ïö¥Ìä∏ Îã§Ïö¥ Í∞í
        setCountdown(count); // Ï¥àÍ∏∞Í∞í ÏÑ§Ï†ï
        
        let timer = setInterval(() => {
            count--; // ÌòÑÏû¨ Ïπ¥Ïö¥Ìä∏ Îã§Ïö¥ Í∞íÏùÑ 1Ïî© Í∞êÏÜå
            setCountdown(count); // Í∞êÏÜåÎêú Í∞íÏùÑ countdown ÏÉÅÌÉúÎ°ú ÏÑ§Ï†ï
            if (count === 0) { // Ïπ¥Ïö¥Ìä∏ Îã§Ïö¥Ïù¥ 0Ïù¥ ÎêòÎ©¥
                clearInterval(timer); // ÌÉÄÏù¥Î®∏Î•º Î©àÏ∂îÍ≥†
                setShowModal(false); // showModalÏùÑ falseÎ°ú ÏÑ§Ï†ïÌïòÏó¨ Î™®Îã¨ÏùÑ Îã´ÏäµÎãàÎã§.
                setAutoShowModal(false); // AutoModal Ï∞ΩÎèÑ Ìï®Íªò Îã´ÏäµÎãàÎã§.
            }
        }, 1000);
    };
    


    const handleBack = () => {
        navigate("/");
    };

    return (
        <>
            <ConfirmationModal
                message={`${modalMessage}`}
                show={showModal}
                onHide={handleCancel}
                onConfirm={handleConfirm}
            />
            <AutoModal
                message={`${modalMessage}`}
                show={autoShowModal}
                countdown={`${countdown}ÁßíÂæåËá™Âãï„ÅßÈñâ„Åæ„Çä„Åæ„Åô„ÄÇ`}
                onHide={() => setAutoShowModal(false)} // countdownÏù¥ 0Ïù¥ ÎêòÎ©¥ AutoModal Ï∞ΩÏùÑ Îã´ÏäµÎãàÎã§.
            />
            <div className="center-form2">
                <h1 className="mochiy-pop-one-regular">Ê§úÁ¥¢ÁµêÊûú</h1>
                <ul>
                    {searchResults.map((item, index) => (
                        <div key={index} onClick={() => handleSongClick(item)}>
                            <div>
                                <img src={item.snippet.thumbnails.default.url} alt="Thumbnail" />
                            </div>
                            <div>
                                <p>{item.snippet.title}</p>
                            </div>
                        </div>
                    ))}
                </ul>
                <Button className="button" onClick={handleBack}>
                    Ê§úÁ¥¢„Éö„Éº„Ç∏„Å∏Êàª„Çã
                </Button>
            </div>
        </>
    );
};

export default SearchSong;
